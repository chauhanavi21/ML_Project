# -*- coding: utf-8 -*-
"""diabetes prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16by73_OZODXKIXLWXHFt8ZZVQE1jH4PV

predicition by Suport vector machine
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

#data collection and analysis
df = pd.read_csv('/content/diabetes.csv')

df.head()

df.shape

df.describe()

df['Outcome'].value_counts()

df.groupby('Outcome').mean()

x = df.drop(columns = 'Outcome',axis=1)
y = df['Outcome']

print(x)

print(y)

scaler = StandardScaler()

scaler.fit(x)

standardized_data = scaler.transform(x)

print(standardized_data)

x = standardized_data

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, stratify=y,random_state = 1)

print(x.shape, x_train.shape, x_test.shape)

#training the model
classifier = svm.SVC(kernel = 'linear')

classifier.fit(x_train, y_train)

x_train_prediction = classifier.predict(x_train)
training_data_Accuracy = accuracy_score(x_train_prediction, y_train)

#if it is greater then 75 % it is good
print("accuracy for the training data is ",training_data_Accuracy)

x_test_prediction = classifier.predict(x_test)
testing_data_Accuracy = accuracy_score(x_test_prediction, y_test)

print("accuracy for the test data is ",testing_data_Accuracy)

"""as training data and test data doesn't have much difference it means they are not overfitting"""

#predictive system
input_data = [(1,89,66,23,94,28.1,0.167,21),(2,197,70,45,543,30.5,0.158,53)]

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(2,-1)

#always remember point if we had standardized the data we have to do it again in the predictive system

std_Data = scaler.transform(input_data_reshaped)
print(std_Data)

prediction = classifier.predict(std_Data)
print(prediction)

for i in prediction:
  if (prediction[i] ==0):
    print("the person is not diabetic")
  else:
    print("the person is diabetic")