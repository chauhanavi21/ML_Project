# -*- coding: utf-8 -*-
"""house price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g9b1nF_Pk4ZA_D32tVuj8tt9RQgl28eU
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

house_price_dataset = sklearn.datasets.fetch_california_housing()

house_price_dataframe = pd.DataFrame(house_price_dataset.data, columns= house_price_dataset.feature_names)

house_price_dataframe['price'] = house_price_dataset.target

house_price_dataframe.head()

house_price_dataframe.shape

house_price_dataframe.isnull().sum()

house_price_dataframe.describe()

house_price_dataframe.groupby('price').mean()

#correlation
correlation = house_price_dataframe.corr()

plt.figure(figsize = (10,10))
sns.heatmap(correlation, cbar = True, square = True, fmt = '.1f', annot = True, annot_kws={'size':8}, cmap='Blues')

x = house_price_dataframe.drop(['price'], axis=1)
y = house_price_dataframe['price']

print(x)
print(y)

x_train, x_test , y_train , y_test = train_test_split(x,y,test_size = 0.2, random_state=2)

model = XGBRegressor()

model.fit(x_train,y_train)

training_data_predict = model.predict(x_train)

# r squared for eavluation
# less the value of error more accuracy
score_1 = metrics.r2_score(y_train, training_data_predict)

# mean absolute error
score_2 = metrics.mean_absolute_error(y_train, training_data_predict)

print("r mean error ",score_1)
print("mean absolute error ",score_2)

test_data_predict = model.predict(x_test)

# r squared for eavluation
# less the value of error more accuracy
score_1 = metrics.r2_score(y_test, test_data_predict)

# mean absolute error
score_2 = metrics.mean_absolute_error(y_test, test_data_predict)

print("r mean error ",score_1)
print("mean absolute error ",score_2)

# actual price and predictive price  if they are close to each other that means it is correct
plt.scatter(y_train, training_data_predict)
plt.xlabel("actual prices")
plt.ylabel("predictied price")
plt.title("actual price vs predicted price")
plt.show()